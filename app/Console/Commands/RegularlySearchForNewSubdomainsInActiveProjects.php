<?php

namespace App\Console\Commands;

use App\AdminNotice;
use App\Helper\FileHelper;
use App\Jobs\putCommandInTaskSpooler;
use App\Project;
use App\Task\ctfrCommand;
use App\Task\facebookCTCommand;
use App\Task\SublisterCommand;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Validator;

/**
 * Class RegularlySearchForNewSubdomainsInActiveProjects
 * @package App\Console\Commands
 */
class RegularlySearchForNewSubdomainsInActiveProjects extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'cronjob:search-new-subdomains';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Gets every active project and its base domains, then searches for new subdomains!';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $activeProjects = Project::active()->get();

        foreach ($activeProjects as $project) {

            if (is_null($project->base_domains)) {
                continue;
            }

            if (trim($project->base_domains) == "") {
                continue;
            }

            $domains = FileHelper::splitContentByLines($project->base_domains);

            $domains = $this->trimDomains($domains);
            $domains = $this->toLowerCase($domains);
            $domains = $this->dropEmptyLines($domains);
            $domains = $this->dropInvalidDomains($domains);
            $domains = array_unique($domains);

            if (empty($domains)) {
                continue;
            }

            $this->startCommands($project, $domains);


        }
    }

    /**
     * @param array $domains
     *
     * @return array
     */
    protected function trimDomains(array $domains): array
    {
        return array_map(function ($string) {
            return trim($string);
        }, $domains);
    }

    /**
     * @param array $domains
     *
     * @return array
     */
    protected function toLowerCase(array $domains): array
    {
        return array_map(function ($string) {
            return strtolower($string);
        }, $domains);
    }

    /**
     * @param array $domains
     *
     * @return array
     */
    protected function dropEmptyLines(array $domains): array
    {
        return array_filter($domains, function ($string) {
            return !empty($string);
        });
    }

    /**
     * @param array $domains
     *
     * @return array
     */
    protected function dropInvalidDomains(array $domains): array
    {
        return array_filter($domains, function ($string) {
            $validator = Validator::make(['domain' => $string], [
                'domain' => [
                    'required',
                    'string',
                    'min:4',
                    'regex:/^[a-zA-Z0-9öäüß\-_\.]{1,255}\.[a-z]{2,7}$/',
                ],
            ]);

            return !$validator->fails();
        });
    }

    /**
     * @param \App\Project $project
     * @param array        $domains
     */
    protected function startCommands(Project $project, array $domains)
    {
        foreach ($domains as $domain) {

            if (config('ptm.cronjobs.regular_subdomain_scan.use_fbct')) {
                $command = facebookCTCommand::create($project, $domain);
                putCommandInTaskSpooler::dispatch($command);
            }

            if (config('ptm.cronjobs.regular_subdomain_scan.use_ctfr')) {
                $command = ctfrCommand::create($project, $domain);
                putCommandInTaskSpooler::dispatch($command);
            }

            if (config('ptm.cronjobs.regular_subdomain_scan.use_sublister')) {
                $command = SublisterCommand::create($project, $domain, 50);
                putCommandInTaskSpooler::dispatch($command);
            }

            $activeTargetsCounter = $project->activeTargets()->count();

            AdminNotice::create([
                'type'    => 'success',
                'context' => $this->signature,
                'message' => $domain . " - active subdomains before scan: " . $activeTargetsCounter,
            ]);
        }
    }
}
