<?php

namespace App\Console\Commands;

use App\AdminNotice;
use App\Target;
use Carbon\Carbon;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Symfony\Component\Process\Process;

class TakeScreenshot extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'screenshot:make 
    {--target=0 : Target ID in database} 
    {--url=0 : Target URL}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'This command takes an url and creates a screenshot using phantomjs.';

    /**
     * @var \App\Target
     */
    protected $target;

    /**
     * @var string
     */
    protected $cmd = "";

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {



        list($targetId, $targetUrl) = $this->getArguments();

        $this->validateArguments($targetId, $targetUrl);

        $this->target = Target::findOrFail($targetId);
        $this->markTargetAsScreenshoted();
        
        list($outputFile, $outputPath) = $this->makeOutputFileAndPath($targetUrl, $targetId);

        $this->cmd = $this->createCommand(
            $targetUrl,
            $outputPath
        );

        $this->line("Executed command: " . $this->cmd);

        $this->executeCmd($this->cmd);

        $this->checkIfImageExists($outputPath);

        $this->saveScreenshotToDb($outputFile);

    }

    private function markTargetAsScreenshoted()
    {
        $this->target->autoFetchedScreenshot_at = Carbon::now();
        $this->target->save();
    }

    /**
     * @return array
     */
    protected function getArguments(): array
    {
        $targetId = $this->option('target');
        $targetUrl = trim($this->option('url'));

        return [
            $targetId,
            $targetUrl,
        ];
    }

    /**
     * @param int    $targetId
     * @param string $targetUrl
     */
    protected function validateArguments(int $targetId, string $targetUrl)
    {
        $message = "";
        $abort = false;

        if ($targetUrl == "") {
            $abort = true;
            $message = "TargetURL not set!";
        }
        if ($targetId <= 0) {
            $abort = true;
            $message = "targetID has to be bigger than 0";
        }


        if ($abort) {
            $this->error($message);

            AdminNotice::create([
                'type'    => 'error',
                'context' => $this->signature,
                'message' => $message,
                'cmd'     => $this->cmd,
            ]);

            exit();

        }

    }

    /**
     * @param $targetUrl
     * @param $targetId
     *
     * @return array
     */
    protected function makeOutputFileAndPath($targetUrl, $targetId): array
    {
        $outputFile = str_slug($targetUrl) . "-" . $targetId . ".jpeg";
        $outputPath = storage_path("app/public/screenshots/" . $outputFile);

        return [$outputFile, $outputPath];
    }

    /**
     * @param string $targetUrl
     * @param string $outputPath
     *
     * @return string
     */
    protected function createCommand(
        string $targetUrl,
        string $outputPath
    ): string {
        $cmd = [];

        $cmd[] = "QT_QPA_PLATFORM=offscreen ".config('toolset.bin.phantomjs');
        $cmd[] = config("toolset.path.screenshottaker");
        $cmd[] = trim($targetUrl);
        $cmd[] = $outputPath;

        $finaleCommand = implode(" ", $cmd);

        return $finaleCommand;
    }

    /**
     * @param string $finaleCommand
     */
    protected function executeCmd(string $finaleCommand)
    {
        $process = new Process($finaleCommand);

        $process->setTimeout(
            config("toolset.screenshottaker.timeout")
        );

        $process->start();

        $process->wait(function ($type, $buffer) {
            if (Process::ERR === $type) {
                $this->error($buffer);
            } else {
                $this->line($buffer);
            }
        });
    }

    /**
     * @param $outputPath
     */
    private function checkIfImageExists($outputPath)
    {
        if (!File::exists($outputPath)) {

            $message = "Failed to create screenshot";

            $this->warn($message);

            AdminNotice::create([
                'type'    => 'warning',
                'context' => $this->signature,
                'message' => $message,
                'cmd'     => $this->cmd,
            ]);

            exit();
        }
    }

    /**
     * @param $outputFile
     */
    private function saveScreenshotToDb($outputFile)
    {
        $imageFile = asset('storage/screenshots/' . $outputFile);
        $this->target->screenshots = $imageFile;
        $this->target->save();
    }
}
