<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\Console\Commands;

use App\Helper\FileHelper;
use Illuminate\Console\Command;
use Symfony\Component\Process\Process;

/**
 * Class getDNSData
 * @package App\Console\Commands
 */
class getDNSData extends Command
{
    /**
     *
     */
    const NS = [
        '1.1.1.1',
        '8.8.8.8',
        '8.8.4.4',
    ];
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'test:get-dns {domain}';
    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Get IPs and CNAME for a given domain - this is for tests only...';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $d = $this->argument("domain");

        if ($d == "") {
            $this->error("No domain given");
            exit();
        }

        $ns = $this->getRandomNameserver();

        $exec = new Process("host $d $ns");
        $exec->run();
        $o = $exec->getOutput();

        preg_match_all("|(.*) has address (.*)|", $o, $data);

        if (count($data) != 3 || empty($data[2])) {
            $this->error("No DNS Data found");
            exit();
        }


        $allIPs = implode(", ", $data[2]) ?? '';
        $firstIP = $data[2][0] ?? '';

        $exec = new Process("dig @8.8.8.8 +short $d");
        $exec->run();
        $o = $exec->getOutput();

        $o = FileHelper::splitContentByLines($o);


        $cname = "";
        $host = $d;

        if (isset ($o[0]) && trim($o[0]) != "") {
            if (preg_match("/[a-z]/i", $o[0])) {
                $cname = $o[0];
            }
        }

        $this->line("Queried: $d");
        $this->line("IP: " . $firstIP . " (all... $allIPs)");
        $this->line("CNAME: " . $cname);
        $this->line("Host: " . $host);

    }

    /**
     * @return mixed
     */
    private function getRandomNameserver()
    {
        return array_random(self::NS);
    }
}
