<?php

namespace App\Console\Commands;

use App\AdminNotice;
use App\Target;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Symfony\Component\Process\Process;

class massCan extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'masscan:scan     
    {--target=0 : Target ID in database} 
    {--ip=0 : IP Adress} 
    {--speed=100 : Requests per second} 
    {--ports=0-65535 : scan selected ports}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Scans a given target with masscan';

    /**
     * @var \App\Target
     */
    protected $target;

    /**
     * @var string
     */
    protected $cmd = "";

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        list($targetId, $ip, $speed, $ports) = $this->getArguments();

        $this->validateArguments($targetId, $ip);

        $this->target = Target::findOrFail($targetId);

        list($outputFile, $outputPath) = $this->makeOutputFileAndPath();

        $this->cmd = $this->createCommand($ip, $speed, $ports, $outputPath);

        $this->line("Executed command: " . $this->cmd);

        AdminNotice::create([
            'type'    => 'success',
            'context' => 'masscan:scan',
            'message' => "Execution started",
            'cmd'     => $this->cmd,
        ]);

        $this->executeCmd($this->cmd);

        $this->checkIfReportWasCreated($outputPath);

        $reportContent = "Full Report: " . asset("storage/masscan/" . $outputFile) . "\n\n";
        $reportContent .= File::get($outputPath);

        $this->target->ports_masscan = $reportContent;
        $this->target->save();

        $message = "Process finished, report saved to file and database.";

        $this->line($message);

        AdminNotice::create([
            'type'    => 'success',
            'context' => 'masscan:scan',
            'message' => $message,
            'cmd'     => $this->cmd,
        ]);

    }


    /**
     * @return array
     */
    protected function getArguments(): array
    {
        $targetId = $this->option("target");
        $ip = $this->option("ip");
        $speed = $this->option("speed");
        $ports = $this->option("ports");

        return [$targetId, $ip, $speed, $ports];
    }

    /**
     * @param int    $targetId
     * @param string $ip
     */
    protected function validateArguments(int $targetId, string $ip): void
    {

        $message = "";
        $abort = false;

        if ($targetId <= 0) {
            $abort = true;
            $message = "targetID has to be bigger than 0";
        }

        if ($ip <= 0) {
            $abort = true;
            $message = "ip not set";
        }

        if ($abort) {
            $this->error($message);

            AdminNotice::create([
                'type'    => 'error',
                'context' => 'masscan:scan',
                'message' => $message,
                'cmd'     => $this->cmd,
            ]);

            exit();

        }
    }


    /**
     * @return array
     */
    protected function makeOutputFileAndPath(): array
    {
        $outputFile = str_slug($this->target->subdomain) . "-" . $this->target->id . ".txt";
        $outputPath = storage_path("app/public/masscan/" . $outputFile);

        return [$outputFile, $outputPath];
    }

    /**
     * @param string $ip
     * @param int    $speed
     * @param string $ports
     * @param string $outputPath
     *
     * @return string
     */
    protected function createCommand(string $ip, int $speed, string $ports, string $outputPath): string
    {
        $cmd = [];

        $cmd[] = config("toolset.path.masscan");
        $cmd[] = "-p" . $ports;
        $cmd[] = $ip;
        $cmd[] = "--rate=" . $speed;
        $cmd[] = '-oJ ' . $outputPath;


        $cmd = implode(" ", $cmd);

        return $cmd;
    }

    /**
     * @param string $finaleCommand
     */
    protected function executeCmd(string $finaleCommand)
    {
        $process = new Process($finaleCommand);

        $process->setTimeout(
            config("toolset.masscan.timeout")
        );

        $process->start();

        $process->wait(function ($type, $buffer) {
            if (Process::ERR === $type) {
                $this->line($buffer);
            } else {
                $this->line($buffer);
            }
        });
    }

    /**
     * @param string $outputPath
     */
    protected function checkIfReportWasCreated(string $outputPath): void
    {
        if (!File::exists($outputPath)) {
            $message = "Failed importing report... no report found";

            $this->warn($message);

            AdminNotice::create([
                'type'    => 'warning',
                'context' => 'masscan:scan',
                'message' => $message,
                'cmd'     => $this->cmd,
            ]);

            exit();
        }
    }
}
