<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\Console\Commands;

use App\Target;
use App\Task\wc;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Symfony\Component\Process\Process;

class masscanRandom extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'masscan:random  
    {--targettype=active : Type of targets} 
    {--limit=1 : How many targets}  
    {--speed=100 : Requests per second} 
    {--ports=0-65535 : scan selected ports}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Scans a random unscanned ips with masscan';

    protected $targets;

    /**
     * @var string
     */
    protected $cmd = "";

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        list($type, $limit, $speed, $ports) = $this->getArguments();

        $this->getTargets($limit, $type);
        $this->line("Starting with " . $this->targets->count() . " targets...");
        sleep(3);
        
        foreach ($this->targets as $target) {

            if ($target->ip == "0.0.0.0") {
                continue;
            }


            list($outputFile, $outputPath) = $this->makeOutputFileAndPath($target);

            $this->cmd = $this->createCommand($target->ip, $speed, $ports, $outputPath);

            $this->line("Executed command: " . $this->cmd);

            $this->executeCmd($this->cmd);

            if (!$this->checkIfReportWasCreated($outputPath)) {
                continue;
            }


            $reportContent = "Full Report: " . asset("storage/masscan/" . $outputFile) . "\n\n";

            $portsDetected = wc::lineCountOfFile($outputPath);

            if ($portsDetected < 100) {
                $reportContent .= File::get($outputPath);
            } else {
                $reportContent .= $portsDetected . " port detected";
            }

            $target->ports_masscan = $reportContent;
            $target->save();

            $message = "Process finished, report saved to file and database.";

            $this->line($message);

        }

    }


    /**
     * @return array
     */
    protected function getArguments(): array
    {
        $type = $this->option("targettype");
        $limit = $this->option("limit");
        $speed = $this->option("speed");
        $ports = $this->option("ports");

        return [$type, $limit, $speed, $ports];
    }

    /**
     * @param int    $limit
     * @param string $type
     */
    private function getTargets(int $limit, string $type)
    {
        $this->targets = Target::whereNull("ports_masscan")
            ->whereNotNull('ip')
            ->inRandomOrder()
            ->take($limit);

        switch ($type) {
            case 'active':
                $this->targets = $this->targets->where("is_archived", 0);
                break;
            case 'archived':
                $this->targets = $this->targets->where("is_archived", 1);
                break;
        }

        $this->targets = $this->targets->get();
    }

    /**
     * @param $target
     *
     * @return array
     */
    protected function makeOutputFileAndPath($target): array
    {
        $outputFile = str_slug($target->subdomain) . "-" . $target->id . ".txt";
        $outputPath = storage_path("app/public/masscan/" . $outputFile);

        return [$outputFile, $outputPath];
    }

    /**
     * @param string $ip
     * @param int    $speed
     * @param string $ports
     * @param string $outputPath
     *
     * @return string
     */
    protected function createCommand(string $ip, int $speed, string $ports, string $outputPath): string
    {
        $cmd = [];

        $cmd[] = config("toolset.path.masscan");
        $cmd[] = "-p" . $ports;
        $cmd[] = $ip;
        $cmd[] = "--rate=" . $speed;
        $cmd[] = '-oL ' . $outputPath;


        $cmd = implode(" ", $cmd);

        return $cmd;
    }

    /**
     * @param string $finaleCommand
     */
    protected function executeCmd(string $finaleCommand)
    {
        $process = new Process($finaleCommand);

        $process->setTimeout(
            config("toolset.masscan.timeout")
        );

        $process->start();

        $process->wait(function ($type, $buffer) {
            if (Process::ERR === $type) {
                $this->line($buffer);
            } else {
                $this->line($buffer);
            }
        });
    }

    /**
     * @param string $outputPath
     *
     * @return bool
     */
    protected function checkIfReportWasCreated(string $outputPath): bool
    {
        return File::exists($outputPath);
    }
}
