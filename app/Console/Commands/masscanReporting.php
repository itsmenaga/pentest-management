<?php

namespace App\Console\Commands;

use App\Helper\FileHelper;
use App\System\Crawler;
use App\Target;
use Illuminate\Console\Command;

class masscanReporting extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'masscan:reporting
    {--targettype=active : Type of targets}
    {--project=0 : Project of target}
    {--exclude=80,443}
    {--crawl=false}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generates a simple cli based report on masscaned targets!';


    protected $targets;

    protected $sitesWithStatusCode = [];

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $this->getInterestingTargets();

        $portsToExclude = $this->getExcludedPorts();

        $portsToExclude = $this->cleanExcludedPortsToInt($portsToExclude);


        foreach ($this->targets as $target) {

            $match = $this->exctractMasscanData($target);

            if ($this->noDataFound($match)) {
                continue;
            }

            $rawPortLines = $this->splitDataByLine($match);
            $rawPortLinesCount = count($rawPortLines);

            if ($this->hasAlotOpenPorts($rawPortLinesCount)) {
                $this->question("Target: " . $target->subdomain . " (" . $target->ip . ") has " . $rawPortLinesCount . " ports... skipped...");
                continue;
            }

            $interestingPortData = $this->getInterestingPorts($rawPortLines, $portsToExclude);

            if ($this->noInterestingPortsFound($interestingPortData)) {
                continue;
            }

            usort($interestingPortData, function ($port1, $port2) {
                return $port1['port'] <=> $port2['port'];
            });

            $this->reportToConsole($target, $interestingPortData);
            $this->quickCommandsRelatedToTarget($target, $interestingPortData);
        }

        $this->getProjectsWhichRespondWithStatus();
    }

    /**
     *
     */
    private function getInterestingTargets()
    {
        $this->targets = Target::whereNotNull("ports_masscan")->where("ports_masscan", "like", "%masscan%");

        switch ($this->option("targettype")) {
            case 'active':
                $this->targets = $this->targets->where("is_archived", 0);
                break;
            case 'archived':
                $this->targets = $this->targets->where("is_archived", 1);
                break;
        }

        $projectId = intval($this->option("project"));

        if ($projectId > 0) {
            $this->targets = $this->targets->where("project_id", $projectId);
        }

        $this->targets = $this->targets->get();
    }

    /**
     * @return array
     */
    private function getExcludedPorts()
    {
        $portsToExclude = $this->option("exclude");
        $portsToExclude = explode(",", $portsToExclude);

        return $portsToExclude;
    }

    /**
     * @param array $portsToExclude
     *
     * @return array
     */
    private function cleanExcludedPortsToInt(array $portsToExclude): array
    {
        $portsToExclude = array_map('trim', $portsToExclude);
        $portsToExclude = array_map('intval', $portsToExclude);

        return $portsToExclude;
    }

    /**
     * @param \App\Target $target
     *
     * @return mixed
     */
    private function exctractMasscanData(Target $target)
    {
        preg_match('/#masscan(.*)# end/msU', $target->ports_masscan, $match);

        return $match;
    }

    /**
     * @param array $match
     *
     * @return bool
     */
    private function noDataFound(array $match): bool
    {
        return !isset($match[1]);
    }

    /**
     * @param array $match
     *
     * @return array
     */
    private function splitDataByLine(array $match): array
    {
        $rawPorts = trim($match[1]);
        $rawPortLines = FileHelper::splitContentByLines($rawPorts);

        return $rawPortLines;
    }

    /**
     * @param int $rawPortLinesCount
     *
     * @return bool
     */
    private function hasAlotOpenPorts(int $rawPortLinesCount): bool
    {
        return $rawPortLinesCount > 100;
    }

    /**
     * @param array $rawPortLines
     * @param array $portsToExclude
     *
     * @return array
     */
    private function getInterestingPorts(array $rawPortLines, array $portsToExclude): array
    {
        $interestingPortData = [];

        foreach ($rawPortLines as $portLine) {
            $masscanData = explode(" ", $portLine);

            if (count($masscanData) != 5) {
                continue;
            }

            $port = $masscanData[2];
            $ip = $masscanData[3];
            if (in_array($port, $portsToExclude)) {
                continue;
            }

            $interestingPortData[] = [
                'ip'   => $ip,
                'port' => $port,
            ];
        }

        return $interestingPortData;
    }

    /**
     * @param array $interestingPortData
     *
     * @return bool
     */
    private function noInterestingPortsFound(array $interestingPortData): bool
    {
        return count($interestingPortData) == 0;
    }

    /**
     * @param \App\Target $target
     * @param array       $interestingPortData
     */
    private function reportToConsole(Target $target, array $interestingPortData)
    {
        $this->question("Interesting target with nonstandard ports found...");
        $this->line("Target: " . $target->subdomain . " IP: " . $target->ip);

        foreach ($interestingPortData as $data) {


            $message = [];
            $message[] = "Port: " . $data["port"] . " (IP: " . $data['ip'] . ")";
            $message[] = "telnet " . $data['ip'] . " " . $data["port"];
            $message[] = "http://" . $data['ip'] . ":" . $data["port"] . "/";

            $this->addHttpStatusesIfActive($data);

            $this->warn(implode(" | ", $message));
        }
    }

    /**
     * @param $data
     */
    private function addHttpStatusesIfActive($data)
    {
        if ($this->option("crawl") != "false") {
            $this->crawlAndGetStatus("http://" . $data['ip'] . ":" . $data["port"] . "/");
            $this->crawlAndGetStatus("https://" . $data['ip'] . ":" . $data["port"] . "/");
        }
    }

    /**
     * @param string $url
     */
    private function crawlAndGetStatus(string $url)
    {
        $crawler = new Crawler([
            'connect_timeout' => 3,
            'timeout'         => 3,
        ]);

        $crawler->crawl($url);

        $data = $crawler->response;
        $code = 0;

        if (is_array($data) && $data['code'] > 0) {
            $code = (int)$data['code'];
        }

        if (!is_array($data)) {
            $code = (int)$data->getStatusCode();
        }

        if ($code > 0) {
            $this->line("      " . $url . " (" . $code . ")");
            $this->sitesWithStatusCode[$url] = $code;
        }
    }

    /**
     * @param \App\Target $target
     * @param array       $interestingPortData
     */
    private function quickCommandsRelatedToTarget(Target $target, array $interestingPortData)
    {
        $this->line("");

        $ports = [];

        foreach ($interestingPortData as $data) {
            $ports[] = $data["port"];
        }

        $this->line("nmap command to check ports:");
        $this->line("/usr/bin/nmap -p " . implode(",", $ports) . " " . $target->ip);
        $this->line("/usr/bin/nmap -p " . implode(",", $ports) . " " . $target->subdomain);
    }

    /**
     *
     */
    private function getProjectsWhichRespondWithStatus()
    {
        if ($this->option("crawl") == "false") {
            return;
        }

        asort($this->sitesWithStatusCode);

        $this->line("");
        $this->info(count($this->sitesWithStatusCode) . " active sites found: ");

        foreach ($this->sitesWithStatusCode as $activeSite => $port) {
            $this->line($activeSite . " - " . $port);
        }
    }
}
