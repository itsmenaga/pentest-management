<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Jobs\putCommandInTaskSpooler;
use App\Project;
use App\Target;
use App\Task\DirsearchCommand;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;

class DirsearchController extends Controller
{

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function startMassScan(Request $request, Project $project): JsonResponse
    {
        $this->validate($request, [
            'amount'        => 'required|integer|min:1',
            'word'          => 'nullable|string',
            'statuses'      => 'nullable|string',
            'threads'       => 'required|integer|min:1',
            'wordlist'      => ['required', 'string', 'regex:/^[\w|\.|-]*$/'],
            'extensions'    => ['required', 'string', 'regex:/^[\w|-|,]*$/'],
            'ignore_status' => ['required', 'string', 'regex:/^[\d|,]*$/'],
            'recursive'     => 'required|integer|min:0|max:1',
            'timeout'       => 'required|integer|min:0',
        ]);

        $threads = $request->input('threads');
        $wordlist = $request->input('wordlist');
        $extensions = $request->input('extensions');
        $ignorestatus = $request->input('ignore_status');
        $recursive = $request->input('recursive');
        $timeout = $request->input('timeout');


        $targets = $project
            ->activeTargets()
            ->whereNull('files_dirs_found')
            ->withSearch(
                $request->input("word")
            )
            ->withSpecificStatus(
                explode(",", $request->input("statuses"))
            )
            ->take(
                $request->input("amount")
            )
            ->inRandomOrder()
            ->get();

        foreach ($targets as $target) {

            $url = $target->subdomain;

            if (
                !is_null($target->final_redirect_url) && $target->final_redirect_url != "" &&
                strpos($target->final_redirect_url, $target->subdomain) !== false
            ) {
                $url = $target->final_redirect_url;
            }

            $command = DirsearchCommand::create(
                $target,
                $url,
                $threads,
                $extensions,
                $ignorestatus,
                $wordlist,
                $recursive,
                $timeout
            );

            putCommandInTaskSpooler::dispatch($command);
        }

        return response()->json([
            'status' => true,
            'added'  => $targets->count(),
        ]);

    }

    /**
     * IMPORTANT: Since laravel queue:worker is not really solid when working with long running python commands like
     * dirbuster, dirsearch, massdns... I'm forced to use tsp on ubuntu! Super solid way, easy to monitor and no
     * overlaping of processes!
     *
     * @param \Illuminate\Http\Request $request
     * @param \App\Target              $target
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function startScan(Request $request, Target $target): JsonResponse
    {
        $this->validate($request, [
            'url'           => [
                'required',
                'string',
                'min:4',
                'regex:/^[\w|\.|\/|:|-]*$/',
            ],
            'threads'       => 'required|integer|min:1',
            'wordlist'      => ['required', 'string', 'regex:/^[\w|\.|-]*$/'],
            'extensions'    => ['required', 'string', 'regex:/^[\w|-|,]*$/'],
            'ignore_status' => ['required', 'string', 'regex:/^[\d|,]*$/'],
            'recursive'     => 'required|integer|min:0|max:1',
            'timeout'       => 'required|integer|min:0',
        ]);

        $url = $request->input('url');
        $threads = $request->input('threads');
        $wordlist = $request->input('wordlist');
        $extensions = $request->input('extensions');
        $ignorestatus = $request->input('ignore_status');
        $recursive = $request->input('recursive');
        $timeout = $request->input('timeout');

        $command = DirsearchCommand::create(
            $target,
            $url,
            $threads,
            $extensions,
            $ignorestatus,
            $wordlist,
            $recursive,
            $timeout
        );

        putCommandInTaskSpooler::dispatch($command);

        return response()->json([
            'status'  => true,
            'command' => $command,
        ]);

    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Target              $target
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function getCommand(Request $request, Target $target): JsonResponse
    {
        $this->validate($request, [
            'url'     => [
                'required',
                'string',
                'min:4',
                'regex:/^[\w|\.|\/|:|-]*$/',
            ],
            'threads' => 'required|integer|min:1',

            'wordlist'      => ['required', 'string', 'regex:/^[\w|\.|-]*$/'],
            'extensions'    => ['required', 'string', 'regex:/^[\w|-|,]*$/'],
            'ignore_status' => ['required', 'string', 'regex:/^[\d|,]*$/'],
            'recursive'     => 'required|integer|min:0|max:1',
            'timeout'       => 'required|integer|min:0',
        ]);

        $url = $request->input('url');
        $threads = $request->input('threads');
        $wordlist = $request->input('wordlist');
        $extensions = $request->input('extensions');
        $ignorestatus = $request->input('ignore_status');
        $recursive = $request->input('recursive');
        $timeout = $request->input('timeout');

        $command = DirsearchCommand::create(
            $target,
            $url,
            $threads,
            $extensions,
            $ignorestatus,
            $wordlist,
            $recursive,
            $timeout
        );

        return response()->json([
            'status'       => true,
            'startcommand' => $command,
            'killcommand'  => "kill $(ps aux | grep 'artisan dirsearch' | awk '{print $2}')",
        ]);

    }

}
