<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Jobs\ArchiveBySearch;
use App\Jobs\ArchiveHttpStatus0Targets;
use App\Jobs\ArchiveTimedOutTargets;
use App\Jobs\ArchiveUnresolvableHostTargets;
use App\Jobs\ArchiveWithoutIpTargets;
use App\Project;
use App\System\FolderContent;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;

class ProjectController extends Controller
{

    const PAGINATE = 18;

    const COLUMNS_ALLOWED = ['ip', 'subdomain', 'cname', 'http_response_header'];

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(): View
    {
        $subdomains_wordlists = new FolderContent("toolset/wordlists/subdomains");
        $filesdirs_wordlists = new FolderContent("toolset/wordlists/filesdirs");

        return view('admin.project.index', [
            'siteTitle'            => 'Projects',
            'projects'             => Project::active()->paginate(self::PAGINATE),
            'filesdirs_wordlists'      => $filesdirs_wordlists->all(),
            'subdomains_wordlists'     => $subdomains_wordlists->all(),
        ]);
    }


    /**
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\View\View
     */
    public function archivedProjects(Request $request): View
    {

        $subdomains_wordlists = new FolderContent("toolset/wordlists/subdomains");
        $filesdirs_wordlists = new FolderContent("toolset/wordlists/filesdirs");

        return view('admin.project.index-archive', [
            'siteTitle'            => 'Archived projects',
            'projects'             => Project::archived()->paginate(self::PAGINATE),
            'filesdirs_wordlists'      => $filesdirs_wordlists->all(),
            'subdomains_wordlists'     => $subdomains_wordlists->all(),
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(): View
    {
        return view('admin.project.create', [
            'siteTitle' => 'Create project',
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\View\View
     */
    public function show(Request $request, Project $project): View
    {

        $targets = $project->activeTargets()
            ->withSearch(
                $request->input('search')
            )
            ->withSorting(
                $request->input('sort')
            )
            ->withFilter(
                $request->input('filter')
            )
            ->withStatus(
                $request->input('status')
            )
            ->paginate(self::PAGINATE);

        $subdomains_wordlists = new FolderContent("toolset/wordlists/subdomains");
        $filesdirs_wordlists = new FolderContent("toolset/wordlists/filesdirs");
        $usernames_dirs_wordlists = new FolderContent("toolset/wordlists/usernames");
        $passwords_dirs_wordlists = new FolderContent("toolset/wordlists/passwords");

        return view('admin.project.show', [
            'siteTitle'                => 'Targets of project',
            'project'                  => $project,
            'targets'                  => $targets,
            'filesdirs_wordlists'      => $filesdirs_wordlists->all(),
            'subdomains_wordlists'     => $subdomains_wordlists->all(),
            'usernames_dirs_wordlists' => $usernames_dirs_wordlists->all(),
            'passwords_dirs_wordlists' => $passwords_dirs_wordlists->all(),
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\View\View
     */
    public function archivedTargets(Request $request, Project $project): View
    {
        $targets = $project->archivedTargets()
            ->withSearch(
                $request->input('search')
            )
            ->withSorting(
                $request->input('sort')
            )
            ->withFilter(
                $request->input('filter')
            )
            ->withStatus(
                $request->input('status')
            )
            ->paginate(self::PAGINATE);

        $subdomains_wordlists = new FolderContent("toolset/wordlists/subdomains");
        $filesdirs_wordlists = new FolderContent("toolset/wordlists/filesdirs");
        $usernames_dirs_wordlists = new FolderContent("toolset/wordlists/usernames");
        $passwords_dirs_wordlists = new FolderContent("toolset/wordlists/passwords");

        return view('admin.project.archived-targets', [
            'siteTitle'           => 'Archived targets of project',
            'project'             => $project,
            'targets'             => $targets,
            'filesdirs_wordlists'      => $filesdirs_wordlists->all(),
            'subdomains_wordlists'     => $subdomains_wordlists->all(),
            'usernames_dirs_wordlists' => $usernames_dirs_wordlists->all(),
            'passwords_dirs_wordlists' => $passwords_dirs_wordlists->all(),
        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request): RedirectResponse
    {
        $this->validate($request, [
            'name'         => 'required|string|unique:projects',
            'base_domains' => 'required|string',
        ]);


        $project = Project::create([
            'name'          => $request->input('name'),
            'other_domains' => $request->input('other_domains'),
            'base_domains'  => $request->input('base_domains'),
            'bugbounty_url' => $request->input('bugbounty_url'),
        ]);

        return redirect()
            ->route('admin.project.show', ['project' => $project])
            ->with('status', 'Succesfully created project');
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Project $project
     *
     * @return \Illuminate\Http\Response
     */
    public function edit(Project $project): View
    {
        return view('admin.project.edit', [
            'siteTitle' => 'Edit project',
            'project'   => $project,
        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @param  \App\Project             $project
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Project $project): RedirectResponse
    {
        $this->validate($request, [
            'name'         => 'required|string|unique:projects,name,' . $project->id,
            'base_domains' => 'required|string',
        ]);

        $project->name = $request->input('name');
        $project->other_domains = $request->input('other_domains');
        $project->base_domains = $request->input('base_domains');
        $project->bugbounty_url = $request->input('bugbounty_url');
        $project->save();

        return redirect()
            ->route('admin.project.show', ['project' => $project])
            ->with('status', 'Succesfully updated project');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Project $project
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request, Project $project): JsonResponse
    {
        return response()->json(['status' => $project->delete()]);
    }


    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function archive(Request $request, Project $project): JsonResponse
    {
        if ($project->is_archived === 1) {
            $project->is_archived = 0;
        } else {
            $project->is_archived = 1;
        }

        return response()->json(['status' => $project->save()]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function archiveWithHttp0(Request $request, Project $project): JsonResponse
    {
        ArchiveHttpStatus0Targets::dispatch($project);

        return response()->json([
            'status' => true,
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function archiveUnresolvable(Request $request, Project $project): JsonResponse
    {

        ArchiveUnresolvableHostTargets::dispatch($project);

        return response()->json([
            'status' => true,
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function archiveTimedOut(Request $request, Project $project): JsonResponse
    {
        ArchiveTimedOutTargets::dispatch($project);

        return response()->json([
            'status' => true,
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function archiveWithoutIp(Request $request, Project $project): JsonResponse
    {
        ArchiveWithoutIpTargets::dispatch($project);

        return response()->json([
            'status' => true,
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function archiveBySearch(Request $request, Project $project): JsonResponse
    {

        $this->validate($request, [
            'column' => 'required|string|in:' . implode(",", self::COLUMNS_ALLOWED),
            'query'  => 'required|string|min:4',
        ]);

        ArchiveBySearch::dispatch($project, $request->input("column"), $request->input("query"));

        return response()->json([
            'status' => true,
        ]);
    }

}
