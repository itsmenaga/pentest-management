<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Project;
use App\Task\bruteforceCommand;
use App\Task\htaccessBruteCommand;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;

class bruteForceController extends Controller
{

    /**
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function startHtaccessBruteforcing(Request $request): JsonResponse
    {

        $this->validate($request, [
            'url'      => [
                'required',
                'string',
                'min:4',
                'regex:/^[\w|\.|\/|:|-]*$/',
            ],
            'timeout'  => 'required|int|min:0',
            'threads'  => 'required|int|min:1',
            'userlist' => ['required', 'string', 'regex:/^[\w|\.|-]*$/'],
            'passlist' => ['required', 'string', 'regex:/^[\w|\.|-]*$/'],
        ]);

        $url = $request->input('url');
        $timeout = $request->input("timeout");
        $threads = $request->input("threads");
        $user_wordlist = $request->input("userlist");
        $username_string = $request->input("usernames");
        $passwords_wordlist = $request->input("passlist");


        $type = $request->input("type");


        switch ($type) {
            case 'usernames':
                $startcommand = htaccessBruteCommand::createWithUsernames(
                    $url,
                    $username_string,
                    $passwords_wordlist,
                    $threads,
                    $timeout
                );
                break;
            case 'user_wordlist':
            default:
                $startcommand = htaccessBruteCommand::createWithUserwordlist(
                    $url,
                    $user_wordlist,
                    $passwords_wordlist,
                    $threads,
                    $timeout
                );
        }

        return response()->json([
            'status'       => true,
            'startcommand' => $startcommand,
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function startRandomizedSubdomainBruteForcing(Request $request, Project $project): JsonResponse
    {

        $this->validate($request, [
            'domain'                  => [
                'required',
                'string',
                'min:4',
                'regex:/^[\w|\.|-]*$/',
            ],
            'min_parts'               => 'required|int|min:1',
            'max_parts'               => 'required|int|max:8',
            'timeout'                 => 'required|int|min:10',
            'report_every'            => 'required|int|min:25',
            'imploder'                => 'string|nullable|min:0|max:1',
            'ignore_domains'          => 'string|nullable',
            'wordlist_base'           => 'required|string|in:project,all',
            'wordlist_base_bestcount' => 'required|int|min:0',
            'with_alt_dns'            => 'required|int|min:0|max:1',
        ]);

        $domain = $request->input('domain');
        $min_parts = $request->input("min_parts");
        $max_parts = $request->input("max_parts");
        $imploder = $request->input("imploder");
        $ignore_domains = $request->input("ignore_domains");
        $timeout = $request->input("timeout");
        $report_every = $request->input("report_every");
        $wordlist_base = $request->input("wordlist_base");
        $wordlist_base_bestcount = $request->input("wordlist_base_bestcount");
        $with_alt_dns = $request->input("with_alt_dns");

        return response()->json([
            'status'       => true,
            'startcommand' => bruteforceCommand::create(
                    $project,
                    $domain,
                    $min_parts,
                    $max_parts,
                    $imploder,
                    $ignore_domains,
                    $timeout,
                    $report_every,
                    $wordlist_base,
                    $wordlist_base_bestcount,
                    $with_alt_dns
                ) . " &",
            'killcommand'  => "kill $(ps aux | grep 'artisan bruteforce:subdomains' | awk '{print $2}')",
        ]);
    }

}
