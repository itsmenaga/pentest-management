<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Project;
use App\Target;
use App\Task\masscanCommand;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;

class masscanController extends Controller
{

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Target              $target
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function startScan(Request $request, Target $target): JsonResponse
    {

        $this->validate($request, [
            'ports' => ['required', 'string', 'regex:/^[\d|\-|,]*$/'],
            'speed' => 'required|int|min:100|max:100000',
            'ips'   => ['required', 'string', 'regex:/^[\d|\ |\.|,]*$/'],

        ]);

        $ports = str_replace(" ", "", $request->input("ports"));
        $ips = str_replace(" ", "", $request->input("ips"));
        $speed = $request->input("speed");

        $command = masscanCommand::createForOneTarget($target, $ips, $ports, $speed);

        return response()->json([
            'status'      => true,
            'command'     => $command . " &",
            'killcommand' => "kill $(ps aux | grep 'artisan masscan' | awk '{print $2}')",
        ]);

    }


    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function startProjectScan(Request $request, Project $project): JsonResponse
    {


        $this->validate($request, [
            'ports' => ['required', 'string', 'regex:/^[\d|\-|,]*$/'],
            'speed' => 'required|int|min:100|max:100000',
            'limit' => 'required|int|min:1',
            'type'  => 'required|string|in:archived,active',
        ]);

        $ports = str_replace(" ", "", $request->input("ports"));
        $speed = $request->input("speed");
        $type = $request->input("type");
        $limit = $request->input("limit");

        $command = masscanCommand::createForProject($project, $type, $limit, $ports, $speed);

        return response()->json([
            'status'      => true,
            'command'     => $command . " &",
            'killcommand' => "kill $(ps aux | grep 'artisan masscan' | awk '{print $2}')",
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Project             $project
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function getReport(Request $request, Project $project): JsonResponse
    {

        $this->validate($request, [
            'excluded_ports' => ['required', 'string', 'regex:/^[\d|,]*$/'],
            'type'           => 'required|string|in:archived,active',
        ]);

        $ports = str_replace(" ", "", $request->input("excluded_ports"));
        $type = $request->input("type");


        $command = masscanCommand::projectBasedReport($project, $type, $ports);

        return response()->json([
            'status'  => true,
            'command' => $command,
        ]);
    }

}
