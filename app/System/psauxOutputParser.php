<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\System;

use App\Helper\FileHelper;

/**
 * Class psauxOutputParser
 * @package App\System
 */
class psauxOutputParser
{

    protected $output = [];

    /**
     * psauxOutputParser constructor.
     *
     * @param string $rawOutput
     */
    public function __construct(string $rawOutput)
    {

        $outputLines = FileHelper::splitContentByLines($rawOutput);

        $lines = $this->splitLineByEmptySpace($outputLines);

        $this->output[] = $this->makeHeader($lines);

        $lineIterator = 0;

        foreach ($lines as $line) {

            $lineIterator += 1;

            if ($this->isFirstLine($lineIterator)) {
                continue;
            }

            if ($this->toFewLineElements($line)) {
                continue;
            }

            $tempLine = $this->resetFirst9Columns($line);

            $this->output[] = $this->composeDataArrayBasedOnState($line, $tempLine);
        }


    }

    /**
     * Split every line into parts seperated by whitespace.
     *
     * @param array $outputLines
     *
     * @return array
     */
    protected function splitLineByEmptySpace(array $outputLines): array
    {
        $lines = [];

        foreach ($outputLines as $line) {
            $lines[] = preg_split("/([\s]+)/", $line);
        }

        return $lines;
    }

    /**
     * @param array $lines
     *
     * @return array
     */
    protected function makeHeader(array $lines): array
    {
        return [
            'User'    => $lines[0][0],
            'PID'     => $lines[0][1],
            '%CPU'    => $lines[0][2],
            '%MEM'    => $lines[0][3],
            'VSZ'     => $lines[0][4],
            'RSS'     => $lines[0][5],
            'TTY'     => $lines[0][6],
            'STAT'    => $lines[0][7],
            'Start'   => $lines[0][8],
            'Time'    => $lines[0][9],
            'Command' => $lines[0][10],
        ];
    }

    /**
     * @param integer $lineIterator
     *
     * @return bool
     */
    protected function isFirstLine(int $lineIterator): bool
    {
        return $lineIterator == 1;
    }

    /**
     * @param array $line
     *
     * @return bool
     */
    protected function toFewLineElements(array $line): bool
    {
        return count($line) < 9;
    }

    /**
     * @param array $line
     *
     * @return array
     */
    protected function resetFirst9Columns(array $line): array
    {
        $tempLine = $line;

        unset($tempLine[0]);
        unset($tempLine[1]);
        unset($tempLine[2]);
        unset($tempLine[3]);
        unset($tempLine[4]);
        unset($tempLine[5]);
        unset($tempLine[6]);
        unset($tempLine[7]);
        unset($tempLine[8]);
        unset($tempLine[9]);

        return $tempLine;
    }

    /**
     * @param array $line
     * @param array $tempLine
     *
     * @return array
     */
    protected function composeDataArrayBasedOnState(array $line, array $tempLine): array
    {
        $data = [
            'User'    => $line[0],
            'PID'     => $line[1],
            '%CPU'    => $line[2],
            '%MEM'    => $line[3],
            'VSZ'     => $line[4],
            'RSS'     => $line[5],
            'TTY'     => $line[6],
            'STAT'    => $line[7],
            'Start'   => $line[8],
            'Time'    => $line[9],
            'Command' => implode(" " , $tempLine),
        ];

        return $data;
    }

    /**
     * @return mixed
     */
    public function getResult()
    {
        return json_decode(json_encode($this->output));
    }


}