<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;

/**
 * Class Target
 * @package App
 */
class Target extends Model
{
    /**
     * @var array
     */
    protected $fillable = [
        'subdomain',
        'status',
        'allow_regular_http_checks',
        'ip',
        'cname',
        'ip_list',
        'http_status',
        'final_redirect_url',
        'http_response_header',
        'http_body',
        'open_ports',
        'ports_masscan',
        'files_dirs_found',
        'wpscan_report',
        'note',
        'screenshots',
        'project_id',
        'is_archived',
        'autoFetchedHttpData_at',
        'autoFetchedDNSData_at',
        'autoFetchedScreenshot_at',
        'lastDataUpdate_at',
    ];

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function project()
    {
        return $this->belongsTo('App\Project');
    }

    /**
     * @param                $query
     * @param \Carbon\Carbon $start
     * @param \Carbon\Carbon $end
     *
     * @return mixed
     */
    public function scopeAddedBetween($query, Carbon $start, Carbon $end)
    {
        return $query->whereBetween("created_at", [$start, $end]);
    }

    /**
     * @param     $query
     * @param int $days
     *
     * @return mixed
     */
    public function scopeHttpDataUpdateOlderThan($query, int $days)
    {
        return $query->where('lastDataUpdate_at', '<=', Carbon::now()->subDays($days));
    }

    /**
     * @param     $query
     * @param int $days
     *
     * @return mixed
     */
    public function scopeLastScreenshotOlderThan($query, int $days)
    {
        return $query->where('autoFetchedScreenshot_at', '<=', Carbon::now()->subDays($days));
    }

    /**
     * @param $query
     *
     * @return mixed
     */
    public function scopeActive($query)
    {
        return $query->where('is_archived', 0);
    }

    /**
     * @param $query
     *
     * @return mixed
     */
    public function scopeOfProject($query, int $projectId)
    {
        if ($projectId <= 0) {
            return $query;
        }

        return $query->where('project_id', $projectId);
    }

    /**
     * @param $query
     *
     * @return mixed
     */
    public function scopeChecked($query)
    {
        return $query->where('is_archived', 0)->where('status', 'checked');
    }

    /**
     * @param $query
     *
     * @return mixed
     */
    public function scopeArchived($query)
    {
        return $query->where('is_archived', 1);
    }

    /**
     * @param             $query
     * @param null|string $filter
     *
     * @return mixed
     */
    public function scopeWithFilter($query, ?string $filter)
    {
        switch ($filter) {
            case 'ip-cname':
                return $query->whereNotNull('ip')->whereNotNull('cname');
            case 'ip':
                return $query->whereNotNull('ip');
            case 'no-ip-no-cname':
                return $query->whereNull('ip')->orWhereNull('cname');
            case 'new':
                return $query->where('status', 'new');
            case 'reactivated':
                return $query->where('status', 'reactivated');
            case 'checked':
                return $query->where('status', 'checked');
            case 'checking':
                return $query->where('status', 'checking');
            case 'unknown':
                return $query->where('status', 'unknown');
            case 'nmap':
                return $query->whereNotNull('open_ports');
            case 'masscan':
                return $query->whereNotNull('ports_masscan');
            case 'dirsearch':
                return $query->whereNotNull('files_dirs_found');
            case 'screenshot':
                return $query->whereNotNull('screenshots');
            case 'note':
                return $query->whereNotNull('note');
            case 'wpscan':
                return $query->whereNotNull('wpscan_report');
            case 'http-response-redirect-errors':
                return $query->where("http_status", 0)->where(function ($query) {
                    $query->where("http_response_header", "like", "%will not follow%")
                        ->orWhere("http_response_header", "like", "%redirect%");
                });
        }

        return $query->where('status', '!=', 'checked');
    }


    /**
     * @param             $query
     * @param null|string $sort
     *
     * @return mixed
     */
    public function scopeWithSorting($query, ?string $sort)
    {

        switch ($sort) {
            case 'create-asc':
                return $query->orderBy('created_at');

            case 'create-desc':
                return $query->orderBy('created_at', 'desc');

            case 'updated-asc':
                return $query->orderBy('updated_at');

            case 'updated-desc':
                return $query->orderBy('updated_at', 'desc');

            case 'subdomain-asc':
                return $query->orderBy('subdomain');

            case 'subdomain-desc':
                return $query->orderBy('subdomain', 'desc');
        }

        return $query->orderBy('updated_at', 'desc');

    }

    /**
     * @param             $query
     * @param null|string $search
     *
     * @return mixed
     */
    public function scopeWithSearch($query, ?string $search)
    {
        $search = trim($search);

        if ($search == '') {
            return $query;
        }

        return $query->where('subdomain', 'like', $search . '%')
            ->orWhere('subdomain', 'like', '%' . $search . '%')
            ->orWhere('cname', 'like', $search . '%')
            ->orWhere('cname', 'like', '%' . $search . '%')
            ->orWhere('ip_list', 'like', $search . '%')
            ->orWhere('ip_list', 'like', '%' . $search . '%');


    }

    /**
     * @param             $query
     * @param null|string $statustype
     *
     * @return mixed
     */
    public function scopeWithStatus($query, ?string $statustype)
    {
        switch ($statustype) {
            case '0-200':
                return $query->where('http_status', ">", 0)->where('http_status', "<=", 200);
            case '200-300':
                return $query->where('http_status', ">", 200)->where('http_status', "<=", 300);
            case '300-400':
                return $query->where('http_status', ">", 300)->where('http_status', "<=", 400);
            case '400-500':
                return $query->where('http_status', ">", 400)->where('http_status', "<", 500);
            case '500':
                return $query->where('http_status', '>=', 500);
            case 'na':
                return $query->where('http_status', 0)->orWhereNull('http_status');
            case '403-404':
                return $query->where('http_status', 403)->orWhere('http_status', 404);
            case '401':
                return $query->where('http_status', 401);
        }

        return $query;
    }

    /**
     * @param       $query
     * @param array $statuses
     *
     * @return mixed
     */
    public function scopeWithSpecificStatus($query, array $statuses)
    {


        if (!empty($statuses) && count($statuses) > 0 && $statuses[0] != "") {
            return $query->whereIn("http_status", $statuses);
        }

        return $query;
    }

}
