<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\Task;

use App\Helper\FileHelper;
use App\Project;
use App\Target;
use Carbon\Carbon;

/**
 * Class BatchProcessValidSubdomains
 * @package App\Task
 */
class BatchProcessValidSubdomains
{
    /**
     * @var
     */
    protected $project;

    /**
     * @param $project
     */
    public function setProject(Project $project)
    {
        $this->project = $project;
    }

    /**
     * @param string $rawSubdomainlist
     */
    public function start(string $rawSubdomainlist)
    {
        $subdomains = FileHelper::splitContentByLines($rawSubdomainlist);
        $subdomains = $this->trimSubdomains($subdomains);
        $subdomains = $this->toLowerCase($subdomains);
        $subdomains = $this->dropEmptyLines($subdomains);
        $subdomains = array_unique($subdomains);
        $subdomains = $this->dropAllSubdomainsWhichExistInDatabase($subdomains);

        $data = $this->createImportData($subdomains);

        Target::insert($data);
    }

    /**
     * @param array $subdomains
     *
     * @return array
     */
    protected function trimSubdomains(array $subdomains): array
    {
        return array_map(function ($string) {
            return trim($string);
        }, $subdomains);
    }

    /**
     * @param array $subdomains
     *
     * @return array
     */
    protected function toLowerCase(array $subdomains): array
    {
        return array_map(function ($string) {
            return strtolower($string);
        }, $subdomains);
    }

    /**
     * @param array $subdomains
     *
     * @return array
     */
    protected function dropEmptyLines(array $subdomains): array
    {
        return array_filter($subdomains, function ($string) {
            return !empty($string);
        });
    }

    /**
     * @param array $subdomains
     *
     * @return array
     */
    protected function dropAllSubdomainsWhichExistInDatabase(array $subdomains): array
    {
        $existingTargets = $this->project->targets()->get()->pluck('subdomain')->flatten()->values();

        return array_filter($subdomains, function ($string) use ($existingTargets) {
            if (is_integer($existingTargets->search($string))) {
                return false;
            }

            return true;
        });
    }

    /**
     * @param array $subdomains
     *
     * @return array
     */
    protected function createImportData(array $subdomains): array
    {
        $data = [];
        $now = Carbon::now('utc')->toDateTimeString();

        foreach ($subdomains as $domain) {

            $data[] = [
                'subdomain'  => $domain,
                'status'     => 'new',
                'project_id' => $this->project->id,
                'created_at' => $now,
                'updated_at' => $now,
            ];
        }

        return $data;
    }

}